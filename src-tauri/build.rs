use std::fs;
use std::io::Write;
use std::path::Path;

fn main() {
    // Ensure icon files exist by generating minimal icons at build time.
    // The ICO embeds the PNG for Windows builds.
    const ICON_BYTES: &[u8] = &[
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44,
        0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f,
        0x15, 0xc4, 0x89, 0x00, 0x00, 0x00, 0x0b, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63, 0x60,
        0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x0d, 0x0a, 0x2d, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
    ];
    const ICON_ICO_BYTES: &[u8] = &[
        0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x43,
        0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
        0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x01, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0x15, 0xc4, 0x89, 0x00, 0x00, 0x00, 0x0b, 0x49,
        0x44, 0x41, 0x54, 0x78, 0x9c, 0x63, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x0d, 0x0a,
        0x2d, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
    ];

    // Paths are relative to the crate root (`src-tauri`).
    let png_path = Path::new("icons/icon.png");
    let ico_path = Path::new("icons/icon.ico");

    if !png_path.exists() || !ico_path.exists() {
        if let Some(parent) = png_path.parent() {
            fs::create_dir_all(parent).expect("create icon directory");
        }
    }

    if !png_path.exists() {
        let mut file = fs::File::create(png_path).expect("create png icon");
        file.write_all(ICON_BYTES).expect("write png icon");
    }

    if !ico_path.exists() {
        let mut file = fs::File::create(ico_path).expect("create ico icon");
        file.write_all(ICON_ICO_BYTES).expect("write ico icon");
    }

    tauri_build::build();
}
